<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis入门</title>
      <link href="/2019/07/04/redis/redis%E5%85%A5%E9%97%A8/"/>
      <url>/2019/07/04/redis/redis%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a><strong>Redis入门</strong></h1><h2 id="一、-Redis介绍"><a href="#一、-Redis介绍" class="headerlink" title="一、  Redis介绍"></a>一、  Redis介绍</h2><pre><code>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、一个高性能的key-value数据库。并提供多种语言的API。说到Key-Value数据库NoSQL数据库可以想到MongoDB。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set --有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，Redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</code></pre><h2 id="二、-Redis的安装与配置"><a href="#二、-Redis的安装与配置" class="headerlink" title="二、 Redis的安装与配置"></a>二、 Redis的安装与配置</h2><p>由于windows下安装几乎没有什么操作，我们这里着重介绍linux下安装，并且是在不能连接外网情况下安装。</p><blockquote><ol><li>安装redis首先要确保有对应的环境，本文环境为centos7,先gcc -v查看系统是否安装了gcc，没有的话需要在linux系统上离线安装gcc,这里介绍两种方式：1）、亲测可用，参考博文：<a href="https://blog.csdn.net/qq_28198181/article/details/82978830" target="_blank" rel="noopener">https://blog.csdn.net/qq_28198181/article/details/82978830</a>  2）、在linux终端中打开centos的光驱，进入centos这个目录<br>进入centos目录后<br>[……  centos]# 依次执行下列命令，必须都要执行，其实就是把gcc所有的依赖手动添加到操作系统中，这些rpm文件也可以从网上下载得到<br>rpm-ivh cpp-4.1.2-48.el5.i386.rpm<br>rpm-ivh kernel-headers-2.6.18-194.el5.i386.rpm<br>rpm-ivh glibc-headers-2.5-49.i386.rpm<br>rpm-ivh glibc-devel-2.5-24.i386.rpm<br>rpm-ivh libgomp-4.4.0-6.el5.i386.rpm<br>rpm-ivh gcc-4.1.2-48.el5.i386.rpm<br>执行完毕后gcc -v查看是否安装成功。</li><li>从官网下载redis安装包，我这里使用的是redis-5.0.3.tar.gz，然后放入到linux的/opt目录，可以自己新建文件夹放入，执行解压命令tar -zxvf redis-5.0.3.tar.gz，解压完成后出现redis-5.0.3文件夹，进入这个目录执行make命令，环境没有报错的话接着执行make install命令</li><li>redis安装后默认的启动目录在/usr/local/bin，先执行redis-server 配置文件位置，再执行redis-cli -p 端口号(默认6379)打开redis客户端</li></ol></blockquote><h2 id="三、-Redis的基本数据类型"><a href="#三、-Redis的基本数据类型" class="headerlink" title="三、 Redis的基本数据类型"></a>三、 Redis的基本数据类型</h2><p>1.数据类型</p><table><thead><tr><th>类型</th><th>特点</th><th>使用场景</th></tr></thead><tbody><tr><td>String</td><td>普通的k-v存储结构</td><td>普适</td></tr><tr><td>List</td><td>双向链表</td><td>轻量级消息队列</td></tr><tr><td>Hash</td><td>类似于HashMap</td><td>存储用户信息,k为id,v为具体信息</td></tr><tr><td>Set</td><td>无序，数据不重复</td><td>获取共同好友</td></tr><tr><td>ZSet</td><td>有序且不重复</td><td>时消息队列,带权重的队列</td></tr><tr><td>HyperLogLog</td><td></td><td>基数统计算法</td></tr><tr><td>Geo</td><td></td><td></td></tr><tr><td>Pub/Sub</td><td></td><td>发布订阅</td></tr></tbody></table><p>2.共有操作命令</p><table><thead><tr><th>命令</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>keys</td><td>取出所有Key</td><td>keys *</td></tr><tr><td>keys</td><td>支持正则表达式</td><td>keys “prefix*”</td></tr><tr><td>type</td><td>查看数据类型</td><td>type key</td></tr><tr><td>rename</td><td>重命名key</td><td>rename key newname</td></tr><tr><td>append</td><td>追加value</td><td>append key value</td></tr><tr><td>exists</td><td>判断key是否存在</td><td>exists key</td></tr><tr><td>expire</td><td>设置key的过期时间(秒)</td><td>expire key seconds</td></tr><tr><td>pexpire</td><td>设置key的国企时间（毫秒）</td><td>pexpire keu milliseconds</td></tr><tr><td>expireat</td><td>以 UNIX 时间戳(unix timestamp)格式设置 key 的过期时间（秒）</td><td>EXPIREAT key 1293840000</td></tr><tr><td>pwxpireat</td><td>以 UNIX 时间戳(unix timestamp)格式设置 key 的过期时间（毫秒）</td><td>pwxpireat key 1293840000000</td></tr><tr><td>persist</td><td>取消失效</td><td>persist  key</td></tr><tr><td>dbsize</td><td>数据库键值的数量</td><td>dbsize</td></tr><tr><td>flushdb</td><td>清空单个数据库</td><td>flushdb</td></tr><tr><td>flushall</td><td>清空所有的数据库</td><td>flushall</td></tr><tr><td>info</td><td>查看数据库服务信息</td><td>info</td></tr></tbody></table><p>3.string数据类型,最简单的k-v类型，k或v都可以为字符串或者数字</p><table><thead><tr><th>命令</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>set</td><td>插入键值, 存在则覆盖</td><td>set key value</td></tr><tr><td>get</td><td>查看value</td><td>get key</td></tr><tr><td>setnx</td><td>key存在则什么都不做,不存在与set相同</td><td>setnx k v</td></tr><tr><td>mset</td><td>批量插入键值, 存在则覆盖</td><td>mset k1 v1 k2 v2  Kn Vn</td></tr><tr><td>mget</td><td>批量查看键值</td><td>mget k1 k2 Kn</td></tr><tr><td>msetnx</td><td>mset和setnx的组合效果,如果任意key存在,则全部都不设值</td><td>msetnx k1 v1 k2 v2</td></tr><tr><td>getset</td><td>取值并设置新值,和set的不同在于返回旧值</td><td>getset k  v</td></tr><tr><td>setex</td><td>在set基础上设置过期时间,使用ttl查看剩余时间</td><td>setex key seconds value</td></tr><tr><td>psetex</td><td>同setex,时间单位是毫秒,使用pttl查看剩余时间</td><td>psetex key milliseconds value</td></tr><tr><td>setrange</td><td>从offset处开始用value替换,offset大于总长度则用0补齐 ,不存在则新加</td><td>setrange k offset value</td></tr><tr><td>getrange</td><td>获取指定区间内的内容,下标可以为负数，-1表示结尾</td><td>getrange key start end</td></tr><tr><td>del</td><td>删除键值对</td><td>del k</td></tr><tr><td>strlen</td><td>获取value长度</td><td>strlen k</td></tr><tr><td>append</td><td>给key的字符串追加value,返回新的字符串长度,不存在则新加</td><td>append k v</td></tr><tr><td>incr</td><td>递增,key不存在则value置为1,value为非数组类型则报错</td><td>incr k</td></tr><tr><td>decr</td><td>递减</td><td>decr k</td></tr><tr><td>incrby</td><td>能指定步长的递增</td><td>incrby k n</td></tr><tr><td>decrby</td><td>能指定步长的递减</td><td>decrby k n</td></tr><tr><td>incrbyfloat</td><td>指定步长的递增，n可以为浮点数</td><td>ncrbyfloat k n</td></tr><tr><td>getbit</td><td>字符串类型是以二进制形式存储,bit操作就是对这个二进制进行的操作</td><td>getbit key offset</td></tr><tr><td>setbit</td><td>字符串类型是以二进制形式存储,bit操作就是对这个二进制进行的操作</td><td>setbit key offset</td></tr><tr><td>bitcount</td><td>统计二进制存储中1的个数</td><td>bitcount key</td></tr><tr><td>bitop</td><td>对二进制进行与或非，异或运算</td><td>bitop [and/or/not/xor] destkey key1 [key2] [keyn]   </td></tr></tbody></table><p>4.list数据类型，基于双向循环链表实现，栈元素可以重复</p><table><thead><tr><th>命令</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>*push</td><td>入栈</td><td>向列表左侧加元素：lpush key value…valueN <br>  向列表右侧加元素：rpush key value…valueN</td></tr><tr><td>*pop</td><td>出栈</td><td>列表左侧移除第一个元素：lpop key  <br> 列表右侧移除第一个元素：rpop key</td></tr><tr><td>b*pop</td><td>阻塞式弹出</td><td>列表左侧移除第一个元素：blpop key  <br> 列表右侧移除第一个元素：brpop key</td></tr><tr><td>lrange</td><td>查询指定key的value区间元素</td><td>lrange key start stop</td></tr><tr><td>lindex</td><td>获取指定下标位置的元素</td><td>lindex key index</td></tr><tr><td>llen</td><td>元素的个数(获得list的长度)</td><td>llen key</td></tr><tr><td>lrem</td><td>从list中删除count个value,返回删除的个数,count:0全删除,&lt;0从后开始删</td><td>lrem key count value</td></tr><tr><td>lset</td><td>设置指定位置的值</td><td>lset key index value</td></tr><tr><td>ltrim</td><td>截取指定范围内元素,其余的删除,返回ok成功</td><td>ltrim key start end</td></tr><tr><td>rpoplpush</td><td>从第1个list右边弹出后,从左边放入新的list）</td><td>rpoplpush listkey newlistkey</td></tr></tbody></table><p>3.hash数据类型，类似于java的hashamp，是一个string类型的field适合用于存储对象</p><table><thead><tr><th>命令</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>hset</td><td>给一个字段赋值</td><td>hset key field value</td></tr><tr><td>hget</td><td>查看字段的值</td><td>hget key field</td></tr><tr><td>hmset</td><td>批量赋值</td><td>hmset key field value field1 value1</td></tr><tr><td>hmget</td><td>批量查看</td><td>hmget key field field1 field2</td></tr><tr><td>hsetnx</td><td>存在则不作操作</td><td>hsetnx key field value</td></tr><tr><td>hlen</td><td>获得field个数</td><td>hlen key</td></tr><tr><td>hdel</td><td>删除键值对</td><td>hdel key field field1 field2</td></tr><tr><td>hgetall</td><td>取所有的字段名和值(key-value)</td><td>hgetall key</td></tr><tr><td>hincrby</td><td>增加field的value</td><td>hincrby key field increment</td></tr><tr><td>hexists</td><td>判断字段是否存在</td><td>hexists key field</td></tr><tr><td>hkeys</td><td>获得key的所有字段</td><td>hkeys key</td></tr><tr><td>hvals</td><td>获得key的所有value</td><td>hvals key</td></tr></tbody></table><p>4.set数据结构，无序, 不可重复,支持并集,交集和差集运算. 底层基于hashtable实现</p><table><thead><tr><th>命令</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>sadd</td><td>增加集合元素</td><td>sadd key sadd key value1 [value2 …]</td></tr><tr><td>srem</td><td>删除集合元素</td><td>srem key value1 [value2…]</td></tr><tr><td>smembers</td><td>遍历集合元素</td><td>smembers key</td></tr><tr><td>sismember</td><td>判断值是否存在</td><td>sismember key value</td></tr><tr><td>scard</td><td>集合元素个数</td><td>scard key</td></tr><tr><td>srandmember</td><td>随机返回count个value</td><td>srandmember key count</td></tr><tr><td>spop</td><td>和srandmember相似,但会删除返回的</td><td>spop key count</td></tr><tr><td>smove</td><td>跨集合移动元素</td><td>smove key1 key2 value</td></tr><tr><td>sunion</td><td>并集</td><td>sunion key1  key2</td></tr><tr><td>sinter</td><td>交集</td><td>sinter key1  key2</td></tr><tr><td>sdiff</td><td>差集</td><td>sdiff key1 key2</td></tr><tr><td>sunionstore</td><td>保存并集到destkey</td><td>sunionstore destkey key1 keys2</td></tr><tr><td>sinterstore</td><td>保存交集到destkey</td><td>sinterstore destkey key1 keys2</td></tr><tr><td>sdiffstore</td><td>保存差集到destkey</td><td>sdiffstore destkey key1 key2</td></tr></tbody></table><p>5.zset数据类型，有序set,相比于set增加了权重参数score,也是实现有序的关键,默认以score升序.zset的每个元素都会关联一个double类型的分数。</p><table><thead><tr><th>命令</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>zadd</td><td>集合添加元素</td><td>zadd key score member</td></tr><tr><td>zrange</td><td>查看指定范围内元素</td><td>zrange key m n withscores</td></tr><tr><td>zrangebyscore</td><td>按照scores顺序输出元素</td><td>zrangebyscore key m n withscores</td></tr><tr><td>zrevrange</td><td>类似于zrange,但是逆序</td><td>zrevrange key m n</td></tr><tr><td>zrem</td><td>删除集合中某元素</td><td>zrem key member</td></tr><tr><td>zremrangebyrank</td><td>删除指定区间内所有元素(索引顺序)</td><td>zremrangebyrank key m n</td></tr><tr><td>zremrangebyscore</td><td>删除指定区间内所有元素(权重顺序)</td><td>zremrangebyscore key m n</td></tr><tr><td>zincrby</td><td>修改元素的score,若元素不存在则添加</td><td>zincrby key score member</td></tr><tr><td>zrank</td><td>查看元素索引</td><td>zrank key member</td></tr><tr><td>zrevrank</td><td>查看逆序索引</td><td>zrevrank key member</td></tr><tr><td>zcount</td><td>指定区间内元素的数量</td><td>zcount key m n</td></tr><tr><td>zcard</td><td>元素的个数</td><td>zcard key</td></tr><tr><td>zscore</td><td>查看元素的权重</td><td>zscore key member</td></tr></tbody></table><p>6.HyperLogLog是用来做基数统计的算法，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的，并且很小.可应用于分析每天访问站点的IP, 粗略估算访问数量等场景</p><table><thead><tr><th>命令</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>pfadd</td><td>Pfadd 命令将所有元素参数添加到 HyperLogLog 数据结构中</td><td>PFADD key element [element …]</td></tr><tr><td>Pfcount</td><td>Pfcount 命令返回给定 HyperLogLog 的基数估算值</td><td>PFCOUNT key [key …]</td></tr><tr><td>pfmerge</td><td>将多个 HyperLogLog 合并为一个</td><td>pfmerge destkey sourcekey [sourcekey …]</td></tr></tbody></table><p>7.Geo数据类型很适合应用于移动端基于位置的服务,如外卖应用中, 用户同时有家和公司两个送餐地址, 应用会自动根据当前位置确定用户想要送达的地址.</p><h1 id="geoadd-key-longitude-latitude-member-longitude-latitude-member-…"><a href="#geoadd-key-longitude-latitude-member-longitude-latitude-member-…" class="headerlink" title="geoadd key longitude latitude member [longitude latitude member …]:"></a>geoadd key longitude latitude member [longitude latitude member …]:</h1><h1 id="可以将指定的地理空间位置-纬度、经度、名称-添加到指定的key中"><a href="#可以将指定的地理空间位置-纬度、经度、名称-添加到指定的key中" class="headerlink" title="可以将指定的地理空间位置(纬度、经度、名称)添加到指定的key中"></a>可以将指定的地理空间位置(纬度、经度、名称)添加到指定的key中</h1><p>   geoadd user 116.111 39.111 home<br>   geoadd user 126.111 39.111 office</p><h1 id="geodist-key-member1-member2-unit-计算2点间距离"><a href="#geodist-key-member1-member2-unit-计算2点间距离" class="headerlink" title="geodist key member1 member2 [unit]:计算2点间距离"></a>geodist key member1 member2 [unit]:计算2点间距离</h1><p>   geodist user home office m</p><h1 id="geopos-key-member-member-…-返回经纬度"><a href="#geopos-key-member-member-…-返回经纬度" class="headerlink" title="geopos key member [member …]:返回经纬度"></a>geopos key member [member …]:返回经纬度</h1><p>   geopos user home</p><h1 id="geohash-key-member-member-…-返回Geohash-表示"><a href="#geohash-key-member-member-…-返回Geohash-表示" class="headerlink" title="geohash key member [member …]:返回Geohash 表示"></a>geohash key member [member …]:返回Geohash 表示</h1><p>   geohash user home</p><h1 id="georadius-key-longitude-latitude-radius-m-km-ft-mi"><a href="#georadius-key-longitude-latitude-radius-m-km-ft-mi" class="headerlink" title="georadius key longitude latitude radius m|km|ft|mi:"></a>georadius key longitude latitude radius m|km|ft|mi:</h1><p>   georadius user 121.111 39.111 1000 km withcoord</p><h1 id="同georadius"><a href="#同georadius" class="headerlink" title="同georadius"></a>同georadius</h1><h1 id="georadiusbymember-key-member-radius-m-km-ft-mi"><a href="#georadiusbymember-key-member-radius-m-km-ft-mi" class="headerlink" title="georadiusbymember key member radius m|km|ft|mi"></a>georadiusbymember key member radius m|km|ft|mi</h1><p>   georadiusbymember user home 100 km</p><p>8.Pub/Sub(发布/订阅消息通信模式),在消费者下线的情况下,生产的消息会丢失,得使用专业的消息队列如rabbitmq等.</p><table><thead><tr><th>命令</th><th>说明</th><th>例</th></tr></thead><tbody><tr><td>subscribe</td><td>订阅channel</td><td>subscribe foo</td></tr><tr><td>unsubscribe</td><td>退订channel</td><td>unsubscribe [channel [channel …]]</td></tr><tr><td>publish</td><td>发布消息到channel</td><td>publish foo “foobar”</td></tr><tr><td>psubscribe</td><td>支持通配符的订阅</td><td>psubscribe pattern [pattern …]</td></tr><tr><td>punsubscribe</td><td>支持通配符的退订</td><td>punsubscribe [pattern [pattern …]]</td><td></td></tr><tr><td>pubsub</td><td>查看订阅与发布状态</td><td>pubsub subcommand [argument [argument …]]</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> NoSql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
